@page "/meals/delete"
@using Microsoft.EntityFrameworkCore
@using JournalApp.Models
@inject IDbContextFactory<JournalApp.Data.JournalAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Meals</h2>
    <hr />
    @if (meals is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@meals.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Thoughts</dt>
            <dd class="col-sm-10">@meals.Thoughts</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@meals.Price</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Rating</dt>
            <dd class="col-sm-10">@meals.Rating</dd>
        </dl>
        <EditForm method="post" Model="meals" OnValidSubmit="DeleteMeals" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(meals is null)">Delete</button> |
            <a href="/meals">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Meals? meals;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        meals = await context.Meals.FirstOrDefaultAsync(m => m.Id == Id);

        if (meals is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteMeals()
    {
        using var context = DbFactory.CreateDbContext();
        context.Meals.Remove(meals!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/meals");
    }
}
